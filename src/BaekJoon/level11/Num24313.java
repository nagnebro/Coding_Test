package BaekJoon.level11;

import java.util.Scanner;

public class Num24313 {

    public static void main(String[] args) {


        // 문제를 간단하게 이해하자면 다음과 같다
        // g(n)이라는 함수가 있고 f(n)이라는 함수가 있다.
        // 이 때 빅O 표기법에 충족하려면 n0보다 큰 모든 n에 대하여 f(n) <= c * g(n) 이어야한다.
        // f(n) = a1n + a0로 나타낼 수 있다.  (입력들어오는 순서도 a1, a0다 단 이때 a의 절대값의 범위가 주어졌기 때문에
        // 음수가 들어올 수 있음을 감안해야한다.

        // 또한 g(n)은 그냥 n을 나타내는 듯하다.  따라서 요약하자면
        //  (a1*n + a0 ) <= c * g(n) 을 만족하면 1아니면 0이다 -> 이렇게 단순할리가 없을텐데...?

        // g(n)이 어째서 n그대로라고 볼 수 있는거지?
        // 우선 n0보다 n이 더큰 경우에 예외사항은 없다.
        // 오히려 n이 n0보다 커질수록 그 격차는 더 심하게 커진다 (c x g(n))이 더커진다는뜻.
        // 즉 원소나열의 조건의최소값인 n0 로 원소조건을 비교하는것은 맞다. 그러나 어떤 예외사항이 있는듯하다
        // a0와 a1이 음수로 들어올 수 있다. 그러나 오히려 a1나 a0가 음수로 들어와도 fn의 값이 작아지기 때문에
        // 조건에 영향을 미치지는 않는다. n의 범위가 n>1이기 때문에 곱해서 양수가 되는일이 없기 떄문이다.

        // a는 절대값으로 들어오기 때문에
        // 아ㅣ떄 n이 증가함에 따라 결과가 바뀔수도 있다.

        // 그러니까 처음에는 조건에 해당해도
        // 후반가서 음수값이 커지면서 바뀌는 경우가 생긴다.
        // 예를들어 -7n -30 < -8n  이런식이라면 처음에는 조건을 성립한다. 그러나 나중에 가서는 즉 n이 30을 넘어가는 순간 조건이 성립하지 않는다.

        // -7 -30
        // -8
        // 1

        // 처음에 조건 성립했다가 나중에 성립 안되는 경우가 있다.
        // n이 커질수록 우항 보다 좌항의 값 증가 혹은 감소가 작아지는 경우이다.
        // 7n -2 <= 6n    n== 1일떄는 성립한다 그러나 n이 2보다 커지는 순간 성립하지 않는다.
        // -5*3 + 50 <= 6 * 3   --> n==3
        // -7  30
        // 5
        // 3
        // 이걸 식으로 나타내면 n < 30 이다.  즉 n이 무조건 n0보다 커야하는 조건이 추가돼야한다.
        // 만족할 경우에는 검사하고 만족하지 못할경우에는 검사하지도 마라는 건가.

        // 그러니까 우측의 값이랑
        Scanner sc = new Scanner(System.in);
        int a1 = sc.nextInt();
        int a0 = sc.nextInt();
        int c = sc.nextInt();
        int n = sc.nextInt();

        int result = 0;

        // n0가 아닌 n을 구하자. 그리고 그 n의 값보다 클떄 저 식을 실행해본다. 그렇다면 부등호가 n > 이 아니고 n < 인 것이다.
        // 그러면 모든수 n > n0를 성립하지 못한다.

        //a1 *n + a0 <= c * n

        // a1이 음수일 때와 a1이 양수일때는 부등호가 바뀌어버린다.

        // 여기서 핵심은 n이 어떤 수보다 작은 범위값을 가져야한다는 것이다.

        // n <200 과 같아도 n이 200이상이면 조건이 성립하지 않기 떄문이다.
        // 따라서 n에 대한 식으로 전개를 했을때 그 수가 음수가 아니라면 조건이 성립하지 않는 것이다.

        // a1n - cn <= a0 일때
        // n(a1-c) <= a0 이고
        // n <= a0/(a1-c) 인데 이때 a1-c가 음수라면 부등호가 바뀌어야한다.
        // a0 / a1-c >= n  ==> n>= 7 혹은 -n <= 7이다.
        // a0/(a1-c) 이 식은 n에 대한 식으로 부등식을 전개했을 때를 나타낸다
        // 따라서 주어진 n0의 값은 이 식의 값보다 커야한다.
        //
        // a1- c 가 음수일떄 식 전개
        // n * -1 >= a0/(a1-c) 이다.
        // 6n -2 <= 5n
        // n=1일때 성립 x , n == 2 일떄.. 성립하지 않는다.
        // 이런 경우는 처음 한번만 검사하면 . 바로 통과할 것이다.


        // 조건을 정리하면 다음과 같다.
        // n의 부등호는 n쪽으로 벌어져있어야하며  이때 옆의 값보다 주어진 n의 값이 같거나 커야한다.

        // 부등호가 n쪽으로 벌어져있다. a0 / a1-c 에다가 1을 더한 값을 n에 대입했을떄도 식이 성립하면 그 수의 부등호는 벌어진 것이라 볼 수 있고
        // 1을 더한 값이 성립하지 않는다면 그 수의 부등호는 n을 향해 가리키고 있을 것이다

        // a0 / a1-c의 값이 음수이면 -n >= (a0/a1-c) * -1 이고
         // a0 / a1-c 의 값이 양수이면 n >=


        if(a1 * n + a0 <= c * n && !(a1 > c && a0 < 0)){
            result = 1;
            System.out.println(result);
            return;
        }

        System.out.println(result);

}
}
