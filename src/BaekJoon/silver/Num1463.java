package BaekJoon.silver;

import java.util.Scanner;

public class Num1463 {

    public static void main(String[] args) {


        // 미제출(오답
        // n은 100만까지 주어진다.
//      1.  X가 3으로 나누어 떨어지면, 3으로 나눈다.
//      2.  X가 2로 나누어 떨어지면, 2로 나눈다.
//      3.  1을 뺀다.
        // 최소값을 구하는게 목표이므로 3으로 먼저 나눠본 후 2로 나눠보고 그래도 안되면 1을 뺀다.
        // 그러나 아마 단순히 위 순서대로 했을때는 시간이 오버되지않을까.
        // 10의 경우 10->9->3->1 로 만들 수 있다.
        // 이게 의미하는 바는 나눠진다해서 바로 나눠서는 안된다는 것이다
        // 그 수가 크면 클 수록 그 횟수차이는 더 심해질 것이다.
        // 따라서 1을뺐을때 3으로 나눠지는지를 검사하고
        // 그래도 안된다면 2로 나눠야한다.
        // 2로나누는건 생각할 게 없다. 왜냐하면 1을 빼면 어차피 짝수가 나오기 때문에 2로나눌수 있기 때문이다
        // 6의 배수가 그런 예다. 따라서 나눌 수 있으면 3으로 나누되
        // 나눌 수 없을때는 1을 뺀값일떄 3으로 나눌 수 있는지를 검사하고
        // 안될 경우 1을 빼고 다시 로직을 처리하면된다.
        // 이 떄 조건을 최소화하는게 중요할듯하다. 제한시간이 0.15초이기 때문.
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int comp = n; // 계속 나눠지는 수 comp
        int count = 0; // 연산이 몇번 수행됐는지 저장할 변수

        // 이렇게 계산하지 말고 가능

        // 11  ->  10 -> 9 -> 3 -> 1

        // 예를들어 8같은 숫자가 있을때 comp-2 % 3 == 0이  성립한다
        // 비교해보자
        // 2를 우선으로 나눌떄 8 -> 4 -> 2-> 1
        // 8 -> 7-> 6-> 2-> 1 작은수에서는 이게 더 비효율적이다.
        // 101이라해보자
        // 2를우선으로할때 101 -> 100 -> 50 -> 25
        // 101 -> 100-> 99 -> 33
        // 22 같은 경우
        // 22 -> 21 -> 7
        // 22 -> 11 -> 10
        // 이런 경우 4로 나눠지지 않기 때문에 1을 빼고 3으로 나누는 것이 맞다.
        // 25 -> 24 -> 8
        // 25-> 24 -> 8
        // 백만 19 만 14

        // comp-1 % 3도 무작정 실행해야하는 것이 아니다 횟수가 2번이기 때문에
        // 아무리 3으로 나눈들 2로 두번 나누면 4로 나누는 것이기 때문에 4로 나눌 수 있을때는 4로 나눠야한다
        // 그게 안될때 comp-1 % 3을 실행해야 한다.

        // 또한 2와 3의 공배수가 있을 때.
        // 3 x 5 x 7
        // 105 가 있다
        // 105 -> 35 -> 34 -> 33 -> 11 -> 10 -> 9 -> 3-> 1
        // 105 -> 35 -> 34 -> 17 -> 16 -> 8 -> 4-> 2-> 1

        while(comp != 1){

            if(comp % 3== 0) {
                comp /= 3;
                count ++;
            }else if( comp % 4 != 0 && (comp-1) % 3 == 0){
                comp -= 1;
                comp /= 3;
                count += 2;

            } else if( comp % 2 == 0){

                comp /= 2;
                count += 1;
            }else{
                System.out.println("che");
                comp -= 1;
                count++;
            }



        }
        System.out.println(count);



    }
}
